package com.draagon.meta.generator.direct.object;

import com.draagon.meta.field.MetaField;
import com.draagon.meta.object.MetaObject;
import com.draagon.meta.loader.MetaDataLoader;
import com.draagon.meta.generator.direct.BaseGenerationContext;
import com.draagon.meta.generator.direct.CodeFragment;
import java.util.List;

/**
 * Object-specific generation context for MetaObject code generation
 * Contains state and utilities specific to object/field generation patterns
 */
public class ObjectGenerationContext extends BaseGenerationContext<MetaObject> {
    
    // Object-specific state
    private MetaField currentField;
    
    public ObjectGenerationContext(MetaDataLoader loader) {
        super(loader);
    }
    
    // Object-specific state management
    public ObjectGenerationContext setCurrentObject(MetaObject object) {
        setCurrentItem(object);
        return this;
    }
    
    public MetaObject getCurrentObject() { 
        return getCurrentItem(); 
    }
    
    public ObjectGenerationContext setCurrentField(MetaField field) {
        this.currentField = field;
        return this;
    }
    
    public MetaField getCurrentField() { 
        return currentField; 
    }
    
    @Override
    public String getContextType() {
        return "object";
    }
    
    @Override
    public String resolveVariables(String template) {
        if (template == null) return null;
        
        String result = template;
        
        // Object-specific variable substitution
        MetaObject currentObject = getCurrentObject();
        if (currentObject != null) {
            result = result.replace("${object.name}", currentObject.getName())
                          .replace("${object.shortName}", currentObject.getShortName())
                          .replace("${object.package}", currentObject.getPackage());
        }
        
        // Field-specific variable substitution
        if (currentField != null) {
            result = result.replace("${field.name}", currentField.getName())
                          .replace("${field.type}", currentField.getDataType().toString());
        }
        
        // Common substitutions
        if (currentPackage != null) {
            result = result.replace("${package}", currentPackage);
        }
        
        if (currentClassName != null) {
            result = result.replace("${className}", currentClassName);
        }
        
        return result;
    }
    
    @Override
    protected void initializeDefaultFragments() {
        // Add default Java code fragments for object/field generation
        addCodeFragment("java.getter.javadoc", new CodeFragment(
            "/**\n" +
            " * Gets the ${field.name} value\n" +
            " * @return ${field.javaType} the ${field.name}\n" +
            " */"
        ));
        
        addCodeFragment("java.setter.javadoc", new CodeFragment(
            "/**\n" +
            " * Sets the ${field.name} value\n" +
            " * @param ${field.name} the ${field.name} to set\n" +
            " */"
        ));
        
        addCodeFragment("java.getter.signature", new CodeFragment(
            "public ${field.javaType} get${field.nameCapitalized}()"
        ));
        
        addCodeFragment("java.setter.signature", new CodeFragment(
            "public void set${field.nameCapitalized}(${field.javaType} ${field.name})"
        ));
        
        addCodeFragment("java.interface.getter", new CodeFragment(
            "public ${field.javaType} get${field.nameCapitalized}();"
        ));
        
        addCodeFragment("java.interface.setter", new CodeFragment(
            "public void set${field.nameCapitalized}(${field.javaType} ${field.name});"
        ));
        
        addCodeFragment("java.class.header", new CodeFragment(
            "/**\n" +
            " * Generated class for ${object.name}\n" +
            " * @generated by MetaObjects Direct Generator\n" +
            " */\n" +
            "public ${classType} ${className}${superClass} {"
        ));
    }
    
    // Convenience methods for backward compatibility
    public ObjectGenerationContext setProperty(String key, Object value) {
        super.setProperty(key, value);
        return this;
    }
    
    public ObjectGenerationContext addCodeFragment(String name, CodeFragment fragment) {
        super.addCodeFragment(name, fragment);
        return this;
    }
    
    public ObjectGenerationContext addPlugin(ObjectGenerationPlugin plugin) {
        super.addPlugin(plugin);
        return this;
    }
    
    public ObjectGenerationContext setCurrentPackage(String packageName) {
        super.setCurrentPackage(packageName);
        return this;
    }
    
    public ObjectGenerationContext setCurrentClassName(String className) {
        super.setCurrentClassName(className);
        return this;
    }
    
    public ObjectGenerationContext addImport(String importName) {
        super.addImport(importName);
        return this;
    }
    
    public ObjectGenerationContext putCache(String key, Object value) {
        super.putCache(key, value);
        return this;
    }
    
    // Convenience method to return plugins with correct type for ObjectGenerationContext
    public List<ObjectGenerationPlugin> getObjectPlugins() {
        return super.getPlugins().stream()
                .map(plugin -> (ObjectGenerationPlugin) plugin)
                .collect(java.util.stream.Collectors.toList());
    }
}