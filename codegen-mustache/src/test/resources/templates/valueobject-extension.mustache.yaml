name: "ValueObject Extension Template"
version: "1.0.0"
description: "Generate classes extending ValueObject with dynamic property access"
targetLanguage: "java"
outputFileExtension: "java"
packagePath: true
requirements:
  helpers: ["capitalize", "javaType"]
template: |
  package {{packageName}};
  
  import com.draagon.meta.object.value.ValueObject;
  import com.draagon.meta.object.MetaObject;
  import com.draagon.meta.loader.MetaDataRegistry;
  {{#imports}}
  import {{.}};
  {{/imports}}
  
  /**
   * ValueObject extension for {{className}}
   * Uses dynamic property access via MetaObjects
   */
  public class {{className}} extends ValueObject {
      
      private static final String META_OBJECT_NAME = "{{fullName}}";
      
      // Static factory method that finds MetaObject by full name
      public static {{className}} newInstance() {
          MetaObject metaObject = MetaDataRegistry.findMetaObject(META_OBJECT_NAME);
          if (metaObject == null) {
              throw new IllegalStateException("MetaObject not found: " + META_OBJECT_NAME);
          }
          return new {{className}}(metaObject);
      }
      
      // Constructor with MetaObject
      public {{className}}(MetaObject metaObject) {
          super(metaObject);
      }
      
      // Type-safe property accessors using dynamic get/set methods
      {{#fields}}
      
      /**
       * Get {{name}} property
       * @return {{javaType}} value or null if not set
       */
      public {{javaType}} {{getterName}}() {
          return ({{javaType}}) getAttrValue("{{name}}");
      }
      
      /**
       * Set {{name}} property
       * @param {{name}} the {{javaType}} value to set
       */
      public void {{setterName}}({{javaType}} {{name}}) {
          setAttrValue("{{name}}", {{name}});
      }
      
      /**
       * Check if {{name}} property is set
       * @return true if {{name}} has a value
       */
      public boolean {{hasMethodName}}() {
          return hasAttr("{{name}}");
      }
      
      {{/fields}}
      
      // Fluent builder methods for method chaining
      {{#fields}}
      
      /**
       * Fluent setter for {{name}}
       * @param {{name}} the {{javaType}} value to set
       * @return this instance for method chaining
       */
      public {{className}} {{name}}({{javaType}} {{name}}) {
          {{setterName}}({{name}});
          return this;
      }
      
      {{/fields}}
      
      /**
       * Create a copy of this object with all current values
       * @return new {{className}} instance with copied values
       */
      public {{className}} copy() {
          {{className}} copy = newInstance();
          {{#fields}}
          if ({{hasMethodName}}()) {
              copy.{{setterName}}({{getterName}}());
          }
          {{/fields}}
          return copy;
      }
      
      /**
       * Get the MetaObject name for this class
       * @return the fully qualified MetaObject name
       */
      public static String getMetaObjectName() {
          return META_OBJECT_NAME;
      }
  }