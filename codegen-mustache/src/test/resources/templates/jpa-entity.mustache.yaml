name: "JPA Entity Template"
version: "1.0.0"
description: "Generate JPA entities with database annotations"
targetLanguage: "java"
outputFileExtension: "java"
packagePath: true
requirements:
  attributes: ["dbTable"]
  helpers: ["capitalize", "javaType", "javaArrayType", "dbColumnName", "isIdField", "isNullable", "isArrayField"]
template: |
  package {{packageName}};
  
  import javax.persistence.*;
  import java.io.Serializable;
  import java.util.List;
  {{#imports}}
  import {{.}};
  {{/imports}}
  
  /**
   * JPA Entity for {{className}}
   * Generated from MetaObject: {{fullName}}
   */
  @Entity
  @Table(name = "{{dbTableName}}")
  public class {{className}} implements Serializable {
      
      private static final long serialVersionUID = 1L;
      
      {{#fields}}
      {{#isIdField}}
      @Id
      @GeneratedValue(strategy = GenerationType.IDENTITY)
      {{/isIdField}}
      {{#isArrayField}}
      @ElementCollection
      @CollectionTable(name = "{{dbTableName}}_{{dbColumnName}}", joinColumns = @JoinColumn(name = "{{#isIdField}}id{{/isIdField}}{{^isIdField}}parent_id{{/isIdField}}"))
      @Column(name = "{{dbColumnName}}")
      private {{javaArrayType}} {{name}};
      {{/isArrayField}}
      {{^isArrayField}}
      @Column(name = "{{dbColumnName}}"{{^isNullable}}, nullable = false{{/isNullable}})
      private {{javaType}} {{name}};
      {{/isArrayField}}

      {{/fields}}
      
      // Default constructor
      public {{className}}() {}
      
      // Full constructor
      public {{className}}({{#requiredFields}}{{javaType}} {{name}}{{^isLast}}, {{/isLast}}{{/requiredFields}}) {
          {{#requiredFields}}
          this.{{name}} = {{name}};
          {{/requiredFields}}
      }
      
      {{#fields}}
      {{#isArrayField}}
      // Array getter for {{name}}
      public {{javaArrayType}} {{#capitalize}}get{{name}}{{/capitalize}}() {
          return this.{{name}};
      }

      // Array setter for {{name}}
      public void {{#capitalize}}set{{name}}{{/capitalize}}({{javaArrayType}} {{name}}) {
          this.{{name}} = {{name}};
      }
      {{/isArrayField}}
      {{^isArrayField}}
      // Getter for {{name}}
      public {{javaType}} {{#capitalize}}get{{name}}{{/capitalize}}() {
          return this.{{name}};
      }

      // Setter for {{name}}
      public void {{#capitalize}}set{{name}}{{/capitalize}}({{javaType}} {{name}}) {
          this.{{name}} = {{name}};
      }
      {{/isArrayField}}

      {{/fields}}
      
      // Static factory method using MetaObjects
      public static {{className}} newInstance() {
          com.draagon.meta.object.MetaObject metaObject = 
              com.draagon.meta.loader.MetaDataRegistry.findMetaObject("{{fullName}}");
          if (metaObject == null) {
              throw new IllegalStateException("MetaObject not found: {{fullName}}");
          }
          return new {{className}}();
      }
      
      @Override
      public boolean equals(Object obj) {
          if (this == obj) return true;
          if (obj == null || getClass() != obj.getClass()) return false;
          {{className}} that = ({{className}}) obj;
          {{#fields}}
          {{#isIdField}}
          return Objects.equals({{name}}, that.{{name}});
          {{/isIdField}}
          {{/fields}}
      }
      
      @Override
      public int hashCode() {
          {{#fields}}
          {{#isIdField}}
          return Objects.hash({{name}});
          {{/isIdField}}
          {{/fields}}
      }
      
      @Override
      public String toString() {
          return "{{className}}{" +
              {{#fields}}
              "{{name}}=" + {{name}} +
              {{^isLast}}", " +{{/isLast}}
              {{/fields}}
              '}';
      }
  }