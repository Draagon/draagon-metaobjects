package {{package}};

import com.metaobjects.object.managed.ManagedObject;
import com.metaobjects.object.MetaObject;
import com.metaobjects.util.MetaDataUtil;
import com.metaobjects.MetaDataNotFoundException;
{{#imports}}
import {{.}};
{{/imports}}

/**
 * {{description}}
 *
 * Generated by MetaObjects for ObjectManagerDB - do not modify manually
 */
public class {{className}} extends ManagedObject {

    // Static metadata name for ObjectManagerDB
    public static final String META_OBJECT_NAME = "{{metaObjectName}}";

    // Public constants for field names - use these when accessing MetaData
    {{#fields}}
    public static final String FIELD_{{constantFieldName}} = "{{fieldName}}";
    {{/fields}}

    // Default constructor for framework use (e.g., ObjectManagerDB, Spring)
    public {{className}}() {
        super();
        // MetaObject will be resolved lazily when needed
    }

    // Constructor with MetaObject for proper initialization
    public {{className}}(MetaObject metaObject) {
        super();
        setMetaData(metaObject);
    }

    // Static factory method - preferred way to create instances
    public static {{className}} newInstance() {
        try {
            MetaObject metaObject = MetaDataUtil.findMetaObjectByName(META_OBJECT_NAME, {{className}}.class);
            return new {{className}}(metaObject);
        } catch (MetaDataNotFoundException e) {
            throw new RuntimeException("Could not find MetaObject: " + META_OBJECT_NAME, e);
        }
    }

    {{#fields}}
    // {{fieldName}} - {{javaType}}{{#hasDbColumn}} (DB: {{dbColumn}}){{/hasDbColumn}}
    {{#isBoolean}}
    public {{javaType}} is{{capitalizedFieldName}}() {
        return ({{javaType}}) getObjectAttribute(FIELD_{{constantFieldName}});
    }
    {{/isBoolean}}
    {{^isBoolean}}
    public {{javaType}} get{{capitalizedFieldName}}() {
        return ({{javaType}}) getObjectAttribute(FIELD_{{constantFieldName}});
    }
    {{/isBoolean}}

    public void set{{capitalizedFieldName}}({{javaType}} value) {
        setObjectAttribute(FIELD_{{constantFieldName}}, value);
    }

    {{/fields}}

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{{className}}{");
        {{#fields}}
        {{#isBoolean}}
        sb.append(FIELD_{{constantFieldName}}).append("=").append(is{{capitalizedFieldName}}());
        {{/isBoolean}}
        {{^isBoolean}}
        sb.append(FIELD_{{constantFieldName}}).append("=").append(get{{capitalizedFieldName}}());
        {{/isBoolean}}
        {{#hasNext}}sb.append(", ");{{/hasNext}}
        {{/fields}}
        sb.append("}");
        return sb.toString();
    }
}